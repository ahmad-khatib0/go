package contract_test

import (
	"fmt"
	"net/http"
	"os"
	"testing"

	"github.com/ahmad-khatib0/go/test-driven-development/ch05_integration_test/handlers"
	"github.com/pact-foundation/pact-go/dsl"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// The consumer has specified the behavior they expect from the provider in the
// contract specification. Therefore, the provider verification is much simpler:
//
// 1- We define the provider verification as a unit test, in the same way as we did on the consumer side.
//
// 2- As we run the provider verification against the real service, we do not start the Pact Mock
// Server, but initialize the Pact DSL.
//
// 3- We call the VerifyRequest function, passing in the URL to the provider and the path to the
// consumer-defined contract. This was generated by running the consumer test, as described
// earlier on.
func TestConsumerIndex_Local(t *testing.T) {
	if os.Getenv("LONG") == "" {
		t.Skip("Skipping TestConsumerIndex_Local in short mode.")
	}

	// Initialize
	pact := dsl.Pact{
		Consumer: "Consumer",
		Provider: "BookSwap",
	}

	// The Pact DSL is initialized, and we start up the Pact Mock Server using the Setup() function.
	// Pact will find a free port on the local machine and then start up the server.
	pact.Setup(true)

	// Test case - makes the call to the provider
	// This function wraps around the consumer code that calls out to the provider, including setting up
	// any requests required. As we donâ€™t have a dedicated client service on the BookSwap application,
	// we simply call out to it using the http library.
	test := func() (err error) {
		baseURL, ok := os.LookupEnv("BOOKSWAP_BASE_URL")
		require.True(t, ok)
		url := fmt.Sprintf("%s:%d/", baseURL, pact.Server.Port)

		req, err := http.NewRequest("GET", url, nil)
		assert.Nil(t, err)

		req.Header.Set("Content-Type", "application/json")
		resp, err := http.DefaultClient.Do(req)
		assert.Nil(t, err)
		assert.NotNil(t, resp)
		return
	}

	t.Run("get index", func(t *testing.T) {
		pact.
			// Inside each subtest, we define a new Pact interaction using the AddInteraction() function,
			// which sets up all the prerequisites for contract testing, including starting a Mock Server,
			// if one is running.
			AddInteraction().
			Given("BookSwap is up").
			UponReceiving("GET / request").

			// The dsl.Interaction type returned allows us to configure all of the attributes required
			// to describe the contract between the consumer and provider: the request and response body,
			// headers, query parameters, status code, and so on.
			WithRequest(dsl.Request{
				Method: "GET",
				Path:   dsl.String("/"),
				Headers: dsl.MapMatcher{
					"Content-Type": dsl.String("application/json"),
				},
			}).
			WillRespondWith(dsl.Response{
				Status: http.StatusOK,
				Body: dsl.Like(handlers.Response{
					Message: "Welcome to the BookSwap Service!",
				}),
			})

			// Once everything has been set up for the test case and expected behavior,
			// we verify that the behavior is as written using the Verify function,
		require.Nil(t, pact.Verify(test))
	})

	// Clean up
	// Finally, we record the interaction in a file and invoke the Teardown function, which stops the
	// Pact Mock Server. By default, Pact will save the contract inside the pacts folder in the project.
	require.Nil(t, pact.WritePact())
	pact.Teardown()
}
