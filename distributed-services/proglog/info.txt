
+------+
| gRPC |
+------+
1- each RPC line is an endpoint in that service, The requests 
   and responses are messages that the compiler turns into Go structs,   
2- ConsumeStream—a server-side streaming RPC where the client sends a
   request to the server and gets back a stream to read a sequence of messages
3- ProduceStream—a bidirectional streaming RPC where both the client and
    server send a sequence of messages using a read-write stream. The two
    streams operate independently, so the clients and servers can read and
    write in whatever order they like. For example, the server could wait to
    receive all of the client’s requests before sending back its response. You’d
    order your calls this way if your server needed to process the requests in
    batches or aggregate a response over multiple requests. Alternatively, the
    server could send back a response for each request in lockstep. You’d
    order your calls this way if each request required its own corresponding response.

+-----+
| TLS |
+-----+
CFSSL has two tools we’ll need:
    • cfssl to sign, verify, and bundle TLS certificates and output the results as JSON. 
    • cfssljson to take that JSON output and split them into separate key, cer- tificate, CSR, and bundle files.
in ca-csr.json 
 ╒══════════════════════════════════════════════════════════════════════════════════╕
   • C—country                                                                      
   • L—locality or municipality (such as city)                                      
   • ST—state or province                                                           
   • O—organization                                                                 
   • OU—organizational unit (such as the department responsible for owning the key) 
 ╘══════════════════════════════════════════════════════════════════════════════════╛

The simplest way to implement authorization is with an access control list (ACL). An ACL is a table 
  of rules where each row says something like “Subject A is permitted to do action B on object 
  C.” For example: Alice is permitted to read Distributed Services with Go. In this example, 
  Alice is the subject, to read is the action, and Distributed Services with Go is the object.

+-----------------------------------------------------------------------------+
| The model.conf configures Casbin to use ACL as its authorization mechanism. |
+-----------------------------------------------------------------------------+

╒════════════════════════════════════════════════════════════════════════════════════════════════════════╕
  In the policy.csv file, this is an ACL table, with two entries saying that the root client has produce 
  and consume permissions on the * object (which we’re using as a wildcard,                              
  meaning any object). All other clients, including nobody, will be denied.                              
╘════════════════════════════════════════════════════════════════════════════════════════════════════════╛
