*************************************************************************************** 
********************************* Shadowing Variables ********************************* 
*************************************************************************************** 

- A shadowing variable is a variable that has the same name as a variable in a containing block. 
For as long as the shadowing variable exists, you cannot access a shadowed variable 
- Once the local variable fmt is declared, it shadows the package named fmt in (THE FILE BLOCK),
making it impossible to use the fmt package for the rest of the main function


*************************************************************************************** 
********************************* If Block ******************************************** 
*************************************************************************************** 
- Be aware that just like any other block, a variable declared as part of an if statement will
shadow variables with the same name that are declared in containing blocks


*************************************************************************************** 
********************************* For loop ******************************************** 
*************************************************************************************** 
- for is the only looping keyword in the language. Go accomplishes this by using the for keyword in four different format
    1. A complete, C-style for
    2. A condition-only for
    3. An infinite for
    4. for-range

- Why the order of the key an values may vary ? 
The order of the keys and values varies; some runs may be identical. This is actually a security feature. 
In earlier Go versions, the iteration order for keys in a map was usually (but not always) the same if you 
inserted the same items into a map. This caused two problems. 
 1- People would write code that assumed that the order was fixed, and this would break at weird times. 
 2- If maps always hash items to the exact same values, and you know that a server is storing some user data 
 in a map, you can actually slow down a server with an attack called Hash DoS by sending it specially crafted 
 data where all of the keys hash to the same bucket.
To prevent both of these problems, the Go team made two changes to the map implementation. First, they modified 
the hash algorithm for maps to include a random number that’s generated every time a map variable is created. 
Next, they made the order of a for-range iteration over a map vary a bit each time the map is looped over. 
These two changes make it far harder to implement a Hash DoS attack. 



*************************************************************************************** 
********************************* Ignoring returned values **************************** 
*************************************************************************************** 
Surprisingly, Go does let you implicitly ignore all of the return values for a function. You can write 
divAndRemainder(5,2) and the returned values are dropped. We have actually been doing this since our 
earliest examples: fmt.Println returns two values, but it is idiomatic to ignore them. In almost
all other cases, you should make it explicit that you are ignoring return values by using underscores.


                               THE UNIVERSE BLOCK
There’s actually one more block which is a little weird: the universe block. Go is a small language with 
(ONLY 25 KEYWORDS). What’s interesting is that the built-in types (like int and string), constants 
(like true and false), and functions (like make or close) aren’t included in that list. Neither is nil. 
So, where are they?  Rather than make them keywords, Go considers these predeclared identifiers and defines 
them in the universe block, which is the block that contains all other blocks.  Because these names 
are declared in the universe block, it means that they can be shadowed in other scope
for example like!!: true := 10