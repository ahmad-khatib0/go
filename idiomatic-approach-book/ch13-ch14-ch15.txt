 ╒═══════════════════════════════════════════════════════════════════════════════════════════════════╕
 │ ******************************************** Testing ******************************************** │
 ╘═══════════════════════════════════════════════════════════════════════════════════════════════════╛

-- The go test command allows you to specify which packages to test. Using ./... for the package name specifies 
    that you want to run tests in the current directory and all of the subdirectories of the current directory.
    Include a -v flag to get verbose testing out
-- If you want to use sample data to test functions in a package, create a subdirectory named testdata 
   to hold your files. Go reserves this directory name as a place to hold test files. When reading from
   testdata, always use a relative file reference. Since go test changes the current working directory to the 
   current package, each package accesses its own testdata via a relative file path.
-- Go caches compiled packages if they haven’t changed, Go also caches test results when running tests 
   across multiple packages if they have passed and their code hasn’t changed. The tests are re-compiled 
   and re-run if you change any file in the package or in the testdata directory. You can also force 
   tests to always run if you pass the flag -count=1 to go test.
-- The advantage of using the _test package suffix is that it lets you treat your package as a “black box”; 
   you are forced to only interact with it via its public facing functions, methods, types, constants, and variables.
-- Running a benchmark with memory allocation information 
   produces output with five columns. Here’s what each one means:
   1- BenchmarkFileLen1-12: The name of the benchmark, a hyphen, and the value of GOMAXPROCS for the benchmark.
   2- 25: The number of times that the test ran in order to produce a stable result
   3- 47201025 ns/op: How long it took to run a single pass of this benchmark, in nanoseconds 
      (there are 1,000,000,000 nanoseconds in a second)
   4- 65342 B/op: The number of bytes allocated during a single pass of the benchmark.
   5- 65208 allocs/op: The number of times bytes had to be allocated from the heap during a single pass 
      of the benchmark. This will always be less than or equal to the number of bytes allocated.

MOCKS AND STUBS
    The terms mock and stub are often used interchangeably, but they are actually two different concepts.
    Martin Fowler, a respected voice on all things related to software development, wrote a blog post on mocks that,
    among other things, covers the difference between mocks and stubs. In short, a stub returns back a canned value 
    for a given input while a mock validates that a set of calls happen in the expected order with the expected inputs.
    We used stubs in our examples to return canned values to a given response. You can write your own mocks by hand,
    or you can use a third party library to generate them. The two most popular options are the gomock library from
    Google and the testify library from Stretchr, Inc.
