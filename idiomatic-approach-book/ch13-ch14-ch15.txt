 ╒═══════════════════════════════════════════════════════════════════════════════════════════════════╕
 │ ******************************************** Testing ******************************************** │
 ╘═══════════════════════════════════════════════════════════════════════════════════════════════════╛

-- The go test command allows you to specify which packages to test. Using ./... for the package name specifies 
    that you want to run tests in the current directory and all of the subdirectories of the current directory.
    Include a -v flag to get verbose testing out
-- If you want to use sample data to test functions in a package, create a subdirectory named testdata 
   to hold your files. Go reserves this directory name as a place to hold test files. When reading from
   testdata, always use a relative file reference. Since go test changes the current working directory to the 
   current package, each package accesses its own testdata via a relative file path.
-- Go caches compiled packages if they haven’t changed, Go also caches test results when running tests 
   across multiple packages if they have passed and their code hasn’t changed. The tests are re-compiled 
   and re-run if you change any file in the package or in the testdata directory. You can also force 
   tests to always run if you pass the flag -count=1 to go test.
-- The advantage of using the _test package suffix is that it lets you treat your package as a “black box”; 
   you are forced to only interact with it via its public facing functions, methods, types, constants, and variables.
-- Running a benchmark with memory allocation information 
   produces output with five columns. Here’s what each one means:
   1- BenchmarkFileLen1-12: The name of the benchmark, a hyphen, and the value of GOMAXPROCS for the benchmark.
   2- 25: The number of times that the test ran in order to produce a stable result
   3- 47201025 ns/op: How long it took to run a single pass of this benchmark, in nanoseconds 
      (there are 1,000,000,000 nanoseconds in a second)
   4- 65342 B/op: The number of bytes allocated during a single pass of the benchmark.
   5- 65208 allocs/op: The number of times bytes had to be allocated from the heap during a single pass 
      of the benchmark. This will always be less than or equal to the number of bytes allocated.

MOCKS AND STUBS
    The terms mock and stub are often used interchangeably, but they are actually two different concepts.
    Martin Fowler, a respected voice on all things related to software development, wrote a blog post on mocks that,
    among other things, covers the difference between mocks and stubs. In short, a stub returns back a canned value 
    for a given input while a mock validates that a set of calls happen in the expected order with the expected inputs.
    We used stubs in our examples to return canned values to a given response. You can write your own mocks by hand,
    or you can use a third party library to generate them. The two most popular options are the gomock library from
    Google and the testify library from Stretchr, Inc.

USING THE -SHORT FLAG
    Another option is to use go test with the -short flag. If you want to skip over tests that take a long 
    time, label your slow tests by placing the the following code at the start of the test function:
     +----------------------------------------+
     |          if testing.Short() {          |
     | t.Skip("skipping test in short mode.") |
     |                   }                    |
     +----------------------------------------+
    When you want to run only short tests, pass the -short flag to go test. There are a few problems with the 
    -short flag. If you use it, there are only two levels of testing: short tests and all tests. By using 
    build tags, you can group your integration tests, specifying which service they need in order to run. 
    Another argument against using the -short flag to indicate integration tests is philosophical. Build 
    tags indicate a dependency, while the -short flag is only meant to indicate that you don’t want to run 
    tests that take a long time. Those are different concepts. Finally, I find the -short flag unintuitive. 
    You should run short tests all the time. It makes more sense to require a flag to include 
    long-running tests, not to exclude them.

-- It’s easy to accidentally reference a variable from two different goroutines 
   without acquiring a lock. The computer science term for this is a data race.
-- ? A binary with -race enabled runs approximately ten times slower than a normal binary




 ╓──────────────────────────────────────────────────────────────────────────────────────────╖
 ║ ********************************* Reflect, Unsafe, CGo ********************************* ║
 ╙──────────────────────────────────────────────────────────────────────────────────────────╜
--  When the type of the data can’t be determined at compile time, you can use the reflection support in 
    the reflect package to interact with and even construct data. When you need to take advantage of the 
    memory layout of data types in Go, you can use the unsafe package. And if there is functionality that 
    can only be provided by libraries written in C, you can call into C code with cgo.
-- Reflection is built around three core concepts: Types, Kinds, and Values.
-- When to use reflecation: 
   1- Reading and writing from a database. The database/sql package uses reflection to send 
      records to databases and read data back.
   2- Go’s built-in templating libraries, text/template and
      html/template use reflection to process the values that are passed to the templates.
   3- The fmt package uses reflection heavily, as all of those calls to fmt.Println and friends 
      rely on reflection to detect the type of the provided parameters.
   4- The errors package uses reflection to implement errors.Is and errors.As.
   5- The sort package uses reflection to implement functions that sort and evaluate 
      slices of any type: sort.Slice, sort.SliceStable, and sort.SliceIsSorted.
   6- The last main usage of reflection in the Go standard library is for marshaling and unmarshaling data 
      into JSON and XML, along with the other data formats defined in the various encoding packages. Struct 
      tags are accessed via reflection, and the fields in structs are read and written using reflection as well.
      
-- A type in reflection defines the properties of a variable, what it can hold, and how you can interact with it
-- if you define a struct named Foo, the kind is reflect.Struct and the type is "Foo" 
-- Using reflection is roughly 30 times slower than a custom function for string filtering and nearly 
   70 times slower for ints. It uses significantly more memory and performs thousands of allocations,
