
 ╔═════════════════════════════════════════════════════════════════════════════════╗
 ║ ********************************* Concurrency ********************************* ║
 ╚═════════════════════════════════════════════════════════════════════════════════╝
-- Go’s most famous feature (concurrency), is based on CSP (Communicating Sequential Processes). It’s a style for
   concurrency that was described in 1978 in a paper by Tony Hoare, the man who invented the Quicksort algorithm. 
   The patterns implemented with CSP are just as powerful as the standard ones, but are far easier to understand.

-- A process is an instance of a program that’s being run by a computer’s operating system. The operating 
   system associates some resources, such as memory, with the process and makes sure that other processes 
   can’t access them. A process is composed of one or more threads . A thread is a unit of execution that 
   is given some time to run by the operating system. Threads within a process share access to resources.
   A CPU can execute instructions from one or more threads at the same time, depending on the number of cores.
   One of the jobs of an operating system is to schedule threads on the CPU to make sure that every process 
   (and every thread within a process) gets a chance to run.

-- Goroutines are lightweight processes managed by the Go runtime. When a Go program starts, the Go runtime
   creates a number of threads and launches a single goroutine to run your program. All of the goroutines 
   created by your program, including the initial one, are assigned to these threads automatically by the Go
   runtime scheduler, just as the operating system schedules threads across CPU cores
   1- Goroutine creation is faster than thread creation, because you aren’t
      creating an operating-system level resource.
   2- Goroutine initial stack sizes are smaller than thread stack sizes and can
      grow as needed. This makes goroutines more memory efficient.
   3- Switching between goroutines is faster than switching between threads because it happens entirely 
      within the process, avoiding operating system calls that are (relatively) slow.
   4- The scheduler is able to optimize its decisions because it is part of the Go process. The scheduler 
      works with the network poller, detecting when a goroutine can be unscheduled because it is blocking 
      on I/O. It also integrates with the garbage collector, making sure that work is properly balanced 
      across all of the operating system threads assigned to your Go process.
-- Any time you are reading from a channel that might be closed, use the
       comma ok idiom to ensure that the channel is still open.

-- What happens if multiple cases have channels that can be read or written? The select algorithm is simple:
   it picks randomly from any of its cases that can go forward; order is unimportant. This is very different
   from a switch statement, which always chooses the first case that resolves to true. It also cleanly
   resolves the starvation problem, as no case is favored over another and all are checked at the same time.
--  If you have two goroutines that both access the same two channels, they must be accessed in the same order 
    in both goroutines, or they will deadlock. This means that neither one can proceed because they are waiting 
    on each other. If every goroutine in your Go application is deadlocked, the Go runtime kills your program
    
-- A mutex. it's short for mutual exclusion, and the job of a mutex is to limit the concurrent execution 
    of some code or access to shared piece of data. This protected part is called the critical section.
-- When a mutex is used to protect a value, there is nothing to indicate which goroutine currently has 
   ownership of the value, because access to the value is shared by all of the concurrent processes
-- decide whether to use channels or mutexes:
   1- If you are coordinating goroutines or tracking a value as it is transformed by a series of goroutines, use channels.
   2- If you are sharing access to a field in a struct, use mutexes.
   3- If you discover a critical performance issue when using channels and you cannot 
      find any other way to fix the issue, modify your code to use a mutex.




 ╔══════════════════════════════════════════════════════════════════════════════════════════╗
 ║ ********************************* The Standard Library ********************************* ║
 ╚══════════════════════════════════════════════════════════════════════════════════════════╝
------------------------ Io and friends: 
type Reader interface {
  Read(p []byte) (n int, err error)
}
buf := make([]byte, 2048)
	 we create our buffer once and re-use it on every call to r.Read. This allows us to use a single memory
	 allocation to read from a potentially large data source. If the Read method was written to return a
   []byte, it would require a new allocation on every single call. Each allocation would end up on the heap,
   which would make quite a lot of work for the garbage collector

-- - io.MultiReader, which returns an io.Reader that reads from multiple io.Reader instances, one after another.
   - io.LimitReader, which returns an io.Reader that only reads up to a specified number of bytes from the supplied io.Reader.
   - io.MultiWriter, which returns an io.Writer that writes to multiple io.Writer instances at the same time.
-- The io.Seeker interface is used for random access to a resource 


------------------------ Time: 
-- There are two main types used to represent time, time.Duration and time.Time.
-- The smallest amount of time that Go can represent is one nanosecond
-- The Truncate and Round methods truncate or round a time.Duration to the units of the specified time.Duration.
-- The fact that a time.Time instance contains a time zone means that you should not use == to check if two 
   time.Time instances refer to the same moment in time. Instead, use the Equal method, which corrects for time zone
-- Go  relies on the idea of formatting the date and time January 2, 2006 at 3:04:05PM MST 
   (Mountain Standard Time) to specify your format. Why that date? Because each part of it represents one 
   of the numbers from 1 to 7 (MST is 7 hours before UTC).
-- You can compare a time.Time instance against another instance with the After, Before, and Equal methods.

Monotonic Time
  Most operating systems keep track of two different sorts of time: the wall clock, which corresponds to the 
  current time, and the monotonic clock which simply counts up from the time the computer was booted. 
  The reason for tracking two different clocks is that the wall clock doesn’t uniformly increase. Daylight
  Saving Time, leap seconds, and NTP (Network Time Protocol) updates can make the wall clock move unexpectedly 
  forwards or backwards. This can cause problems when setting a timer or finding the amount of time that’s elapsed.
  To address this potential problem, Go uses monotonic time to track elapsed time whenever a timer is set or a
  time.Time instance is created with time.Now. This support is invisible; timers use it automatically.
  The Sub method uses the montonic clock to calculate the time.Duration if both of the time.Time instances 
  have it set. If they don’t (because one or both of the instances were not created with time.Now), the Sub 
  method uses the time specified in the instances to calculate the time.Duration instead.
