
 ╔═════════════════════════════════════════════════════════════════════════════════╗
 ║ ********************************* Concurrency ********************************* ║
 ╚═════════════════════════════════════════════════════════════════════════════════╝
-- Go’s most famous feature (concurrency), is based on CSP (Communicating Sequential Processes). It’s a style for
   concurrency that was described in 1978 in a paper by Tony Hoare, the man who invented the Quicksort algorithm. 
   The patterns implemented with CSP are just as powerful as the standard ones, but are far easier to understand.

-- A process is an instance of a program that’s being run by a computer’s operating system. The operating 
   system associates some resources, such as memory, with the process and makes sure that other processes 
   can’t access them. A process is composed of one or more threads . A thread is a unit of execution that 
   is given some time to run by the operating system. Threads within a process share access to resources.
   A CPU can execute instructions from one or more threads at the same time, depending on the number of cores.
   One of the jobs of an operating system is to schedule threads on the CPU to make sure that every process 
   (and every thread within a process) gets a chance to run.

-- Goroutines are lightweight processes managed by the Go runtime. When a Go program starts, the Go runtime
   creates a number of threads and launches a single goroutine to run your program. All of the goroutines 
   created by your program, including the initial one, are assigned to these threads automatically by the Go
   runtime scheduler, just as the operating system schedules threads across CPU cores
   1- Goroutine creation is faster than thread creation, because you aren’t
      creating an operating-system level resource.
   2- Goroutine initial stack sizes are smaller than thread stack sizes and can
      grow as needed. This makes goroutines more memory efficient.
   3- Switching between goroutines is faster than switching between threads because it happens entirely 
      within the process, avoiding operating system calls that are (relatively) slow.
   4- The scheduler is able to optimize its decisions because it is part of the Go process. The scheduler 
      works with the network poller, detecting when a goroutine can be unscheduled because it is blocking 
      on I/O. It also integrates with the garbage collector, making sure that work is properly balanced 
      across all of the operating system threads assigned to your Go process.
-- Any time you are reading from a channel that might be closed, use the
       comma ok idiom to ensure that the channel is still open.

-- What happens if multiple cases have channels that can be read or written? The select algorithm is simple:
   it picks randomly from any of its cases that can go forward; order is unimportant. This is very different
   from a switch statement, which always chooses the first case that resolves to true. It also cleanly
   resolves the starvation problem, as no case is favored over another and all are checked at the same time.
--  If you have two goroutines that both access the same two channels, they must be accessed in the same order 
    in both goroutines, or they will deadlock. This means that neither one can proceed because they are waiting 
    on each other. If every goroutine in your Go application is deadlocked, the Go runtime kills your program
