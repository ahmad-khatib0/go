
┌──────┐
  HTTP 
└──────┘
You might sometimes see network addresses written using named ports like ":http" or ":http-alt"
    instead of a number. If you use a named port then Go will attempt to look up the relevant port 
    number from your /etc/services file when starting the server,

Pattern "/" is an example of a subtree path (because it ends in a trailing slash). Another example would 
    be something like "/static/". Subtree path patterns are matched (and the corresponding handler called) 
    whenever the start of a request URL path matches the subtree path. If it helps your understanding, you can 
    think of subtree paths as acting a bit like they have a wildcard at the end, like "/**" or "/static/**".

http.HandleFunc("/snippet/create", createSnippet) 
  # These allow you to register routes without declaring a servemux, Behind the scenes, these functions 
    register their routes with something called the DefaultServeMux , DON'T do that Because DefaultServeMux 
    is a global variable, any package can access it and register a route — including any third-party packages 
    that your application imports. If one of those third-party packages is compromised, they could use 
    DefaultServeMux to expose a malicious handler to the web.

-- Request URL paths are automatically sanitized, if a user makes a request to /foo/bar/..//baz they 
   will automatically be sent a 301 Permanent Redirect to /foo/baz instead.
--  if you have registered the subtree path /foo/, then any request to /foo will be redirected to /foo/

-- servemux is pretty lightweight. It doesn’t support routing based on the request method, it 
   doesn’t support semantic URLs with variables in them, and it doesn’t support regexp-based patterns
   
-- It’s only possible to call w.WriteHeader() once per response, and after the status code has been 
   written it can’t be changed. If you try to call w.WriteHeader() a second time Go will log a warning message
   
-- If you don’t call w.WriteHeader() explicitly, then the first call to w.Write() will automatically send 
   a 200 OK status code to the user. So, if you want to send a non-200 status code, you must call
   w.WriteHeader() before any call to w.Write().
   
-- The http.DetectContentType() function generally works quite well, but it can’t distinguish JSON from 
   plain text. And, by default, JSON responses will be sent with a Content-Type: text/plain; charset=utf-8

-- the header name will always be canonicalized using the textproto.CanonicalMIMEHeaderKey() function. 
   This converts the first letter and any letter following a hyphen to uppercase, and the rest to lowercase

--  When headers are written to a HTTP/2 connection the header names and values 
    will always be converted to lowercase, as per the specifications.

.. Go’s file server has a few really nice features: 
-- It sanitizes all request paths by running them through the path.Clean() function before searching for a 
   file. This removes any . and .. elements from the URL path, which helps to stop directory traversal attacks. 
-- Range requests are fully supported. This is great if your application is
   serving large files and you want to support resumable downloads
-- The Last-Modified and If-Modified-Since headers are transparently supported. If a file hasn’t changed 
   since the user last requested it, then http.FileServer will send a 304 Not Modified status code instead 
   of the file itself. This helps reduce latency and processing overhead for both the client and server.

-- Ports 0-1023 are restricted and (typically) can only be used by services which have root privileges

--  Go’s HTTP server assumes that the effect of any panic is isolated to the goroutine serving
    the active HTTP request (remember, every request is handled in it’s own goroutine).


-- r.PostForm.Get("checkbox-values")  only returns the the first value, In this case you’ll need to work 
   with the r.PostForm:    for i, item := range r.PostForm["items"] { 
                              fmt.Fprintf(w, "%d: Item %s\n", i, item) 
                           }
--  Unless you’re sending multipart data (i.e. your form has the enctype="multipart/form-data" attribute) then POST,
    PUT and PATCH request bodies are limited to 10MB. If this is exceeded then r.ParseForm() will return an error.

--  the string "Zoë" has 3 characters but a length of 4 bytes because of the umlauted ë character.

    ------------- TLS -----------------
--  TLS is essentially the modern version of SSL (Secure Sockets Layer). SSL now has been officially deprecated 
    due to security concerns, but the name still lives on in the public consciousness and is often
    used interoperably with TLS. For clarity and accuracy,
-- To run the generate_cert.go tool,  then the generate_cert.go 
   file should be located under /usr/lib/golang/src/crypto/tls/generate_cert.go


┌────────────┐
  Templating 
└────────────┘
-- {{define "base"}}...{{end}} action to define a distinct named template called base

-- the dot at the end of the {{template "title" .}} action represents any 
   dynamic data that you want to pass to the invoked template

-- Go also provides a {{block}}...{{end}} action, This acts like the {{template}} action, except it allows 
   you to specify default content if the template being invoked doesn’t exist in the current template set.

-- t Go’s html/template package allows you to pass in one — and only one — item of dynamic data when rendering a template

-- If you run the go mod verify command from your terminal, this will verify that the checksums of the downloaded packages 
   on your machine match the entries in go.sum, so you can be confident that they haven’t been altered.
-- If someone else needs to download all the dependencies for the project — which they can do by running go mod download 
   get an error if there is any mismatch between the dependencies they are downloading and the checksums in the file.they will
-- go get github.com/foo/bar@none , prefixing it wi @none will remove this unwanted package 



┌──────────┐
  Database 
└──────────┘
-- we need to use the parseTime=true parameter in our DSN to force it to convert TIME and DATE fields to
   time.Time. Otherwise it returns these as []byte objects
   
-- _ "github.com/go-sql-driver/mysql" 
      Notice how the import path for our driver is prefixed with an underscore? This is because our main.go file doesn’t
      actually use anything in the mysql package. So if we try to import it normally the Go compiler will raise an error.
      However, we need the driver’s init() function to run so that it can register itself with the database/sql package. 
      The trick to getting around this is to alias the package name to the blank identifier. This is standard practice 
      for most of Go’s SQL drivers.

  DB.Query() is used for SELECT queries which return multiple rows.
  DB.QueryRow() is used for SELECT queries which return a single row.
  DB.Exec() is used for statements which don’t return rows (like INSERT and DELETE).

-- In Type Conversions when using row.Scan()
    CHAR, VARCHAR and TEXT map to string.
    BOOLEAN maps to bool.
    INT maps to int; BIGINT maps to int64.
    DECIMAL and NUMERIC map to float.
    TIME, DATE and TIMESTAMP map to time.Time.

-- the default limit for MySQL is 151. So leaving SetMaxOpenConns() totally unlimited or setting the total maximum of
    open and idle connections to greater than 151 may result in your database returning a "too many connections" error 
    under high load. To prevent this error from happening, you’d need to set the total maximum of open and idle 
    connections to comfortably below 151.

-- Prepared statements exist on database connections. So, because Go uses a pool of many database connections, what 
    actually happens is that the first time a prepared statement (i.e. the sql.Stmt object) is used it gets created 
    on a particular database connection. The sql.Stmt object then remembers which connection in the pool was used.
    The next time, the sql.Stmt object will attempt to use the same database connection again. If that connection is 
    closed or in use (i.e. not idle) the statement will be re-prepared on another connection.
    Under heavy load, it’s possible that a large amount of prepared statements will be created on multiple connections. 
    This can lead to statements being prepared and re-prepared more often than you would expect — or even running into 
    server-side limits on the number of statements (in MySQL the default maximum is 16,382 prepared statements).


┌────────┐
  Go Mod 
└────────┘
-- Because the justinas/alice package doesn’t have any semantically-versioned releases available, the ‘version’ identifier 
   in the go.mod file is the datetime of the latest commit followed by the first 12 characters of the commit hash.
   
