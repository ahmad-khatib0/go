go build .                                           # build 
GOOS="linux" go build                                # build for variety of OSs

go list -m all                                       # list dependencies 
go list -m -versions github.com/gorilla/mux          # list available versions of the mux library  

go mod init project-name                             # init the packages manager  
go mod verify                                        # verify the health of packages 
go mod tidy                                          # recompile packages 
go mod why github.com/gorilla/mux                    # list which modules are depending on mux library
go mod graph                                         # list which dependencies are depending on each other
go mod edit -go 1.7                                  # change variety of things in the mod file, in a terminal manner
go mod vendor                                        # git dependencies to a folder instead of from 
                                                       global go folder, this is like the node_modules , 
go run -mod=vendor main.go                           # run from the vendor folder directlly 
go run --race .                                      # check where you have race condetions 

go list -m -versions github.com/ahmad-khatib0/go/idiomatic-approach-book/simpletax  
#  see what versions of the module are available

go test -v -cover -coverprofile=c.out                # output test coverage to a file
go test -bench=.                                     # run all benchmarks in a directory 
go test -bench BenchmarkGetIndex -cpuprofile cpu-books.out ./chapter08/performance
go test -race                                        # runs the test with race checker
# run the fuzz test for 5 seconds 
go test -fuzz FuzzGetSortedValues_ASC -fuzztime 5s ./chapter10/fragile-revised -v
go test -run TestDivide ./ch04_test_suites/table -v
go test -run "^TestAdd" ./chapter02/calculator -cover -v
go test -run TestIndexIntegration ./chapter05/handlers -v -short
go test ./chapter02/calculator -coverprofile=calcCover.out
go test -v -run Integration ./...
# using an env var to target Integration tests (golang test dose not have -long as it has -short flag)
LONG=true go test -run TestIndexIntegration ./chapter05/handlers -v
# run the BDD tests 
ginkgo -v ./chapter05/handlers    # or using ./... oprator 

# View the file using the pprof command tool
go tool pprof performance.test cpu-books.out
go tool cover -html=calcCover.out  # open the generated cover file

# Generating ginkgo test suite (Behavior-driven development BDD)
ginkgo bootstrap

# fix the error: go get -> module found but dose not contain package
go clean -cache 
go clean -modcache 
export GOPROXY=direct

