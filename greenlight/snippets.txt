┌──────────┐
  Database 
└──────────┘

SELECT current_user;                         # show current user
CREATE DATABASE greenlight;    
\?                                           # show list of all flowing similliar commands
\c greenlight                                # connect to db
\l                                           # list dbs 
\dt                                          # list tables 
\du                                          # list users

CREATE ROLE greenlight WITH LOGIN PASSWORD 'pa55word';     # creating user 

CREATE EXTENSION IF NOT EXISTS citext;                     
# add an extension eg, this extension adds a case-insensitive character string type to PostgreSQL
# for example it can be used to store user email addresses

migrate create -seq -ext=.sql -dir=./migrations create_movies_table
# The -seq flag indicates that we want to use sequential numbering like 0001, 0002, ...

migrate -path=./migrations -database=$EXAMPLE_DSN version
# see which migration version your database is currently on

migrate -path=./migrations -database=$EXAMPLE_DSN goto 1
# migrate up or down to a specific version

migrate -path=./migrations -database =$EXAMPLE_DSN down 1
# to roll-back by a specific number of migrations

migrate -path=./migrations -database=$EXAMPLE_DSN force + number
# to fix in case if a previous migration failed 
 

$ migrate -source="s3://<bucket>/<path>" -database=$EXAMPLE_DSN up
$ migrate -source="github://owner/repo/path#ref" -database=$EXAMPLE_DSN up
$ migrate -source="github://user:personal-access-token@owner/repo/path#ref" -database=$EXAMPLE_DSN up
# migrate supports reading migration files from remote sources 

# type bigserial is a 64-bit auto-incrementing integer starting at 1
# type text[] which is an array of zero-or-more text values. It’s important to 
  note that arrays in PostgreSQL are themselves queryable and indexable,



# uses the $1 parameter twice, and the value `123` will be used in both locations where $1 appears.
 stmt := "UPDATE foo SET bar = $1 + $2 WHERE bar = $1"
    err := db.Exec(stmt, 123, 456)
    if err != nil { ... }

--  PostgreSQL has a UUID type and the uuid-ossp extension which you could use for this purpose like so:
    UPDATE movies SET title = $1, year = $2, runtime = $3, genres = $4, version = uuid_generate_v4()
    WHERE id = $5 AND version = $6  RETURNING version

-- SELECT id, created_at, title, year, runtime, genres, version FROM movies
   WHERE (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1) OR $1 = '')
   AND (genres @> $2 OR $2 = '{}')         
   ORDER BY id

# The to_tsvector('simple', title) function takes a movie title and splits it into lexemes. We specify the 
  simple configuration, which means that the lexemes are just lowercase versions of the words in the title
  For example, the movie title "The Breakfast Club"  would be split into the lexemes 'breakfast' 'club' 'the' 
# The plainto_tsquery('simple', $1) function takes a search value and turns it into a formatted query 
  term that PostgreSQL full-text search can understand. It normalizes the search value strips any special characters,
  and inserts the and operator & between the words: eg:  "The Club"  => 'the' & 'club' .
# The @@ operator is the matches operator In our statement we are using it to check whether the generated query 
  term matches the lexemes, eg:  'the' & 'club'  will  match rows which contain both lexemes 'the' and 'club'


additional: 
 1-  SELECT id, created_at, title, year, runtime, genres, version FROM movies
      WHERE (STRPOS(LOWER(title), LOWER($1)) > 0 OR $1 = '')
      AND (genres @> $2 OR $2 = '{}')
      ORDER BY id
 2-  SELECT id, created_at, title, year, runtime, genres, version FROM movies
      WHERE (title ILIKE $1 OR $1 = '')
      AND (genres @> $2 OR $2 = '{}')
      ORDER BY id


SELECT *, encode(password_hash, 'escape') FROM users
# convert the bytea stored values to string 


┌──────┐
  HTTP 
└──────┘
xargs -I % -P8 curl -X PATCH -d '{"runtime": "97 mins"}' "localhost:4000/v1/movies/4" < <(printf '%s\n' {1..8})
# sends a bunch of concurrent requests to an endpoint
