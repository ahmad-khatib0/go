┌─────────────┐
 INFORMATION 
└─────────────┘
-- The rule about pointers vs. values for receivers is that value methods can be invoked on
     pointers and values, but pointer methods can only be invoked on pointers.

1- The bin directory will contain our compiled application binaries, ready for deployment to a production server.

2- The cmd/api directory will contain the application-specific code for our Greenlight API application. This 
    will include the code for running the server, reading and writing HTTP requests, and managing authentication.

3- The internal directory will contain various ancillary packages used by our API. It will
    contain the code for interacting with our database, doing data validation, sending emails and so on.
    Basically, any code which isn’t application-specific and can potentially be reused will live in here.
    Our Go code under cmd/api will import the packages in the internal directory (but never the other way around).
    
4- The migrations directory will contain the SQL migration files for our database.

5- The remote directory will contain the configuration files and setup scripts for our production server.


┌──────┐
 HTTP 
└──────┘

There are two common approaches to do API versioning:
-- 1- By prefixing all URLs with your API version, like /v1/healthcheck or /v2/healthcheck .
-- 2- By using custom Accept and Content-Type headers on requests and responses to
      convey the API version, like Accept: application/vnd.greenlight-v1 .
--  curl -i -X OPTIONS localhost:4000/v1/healthcheck    :will show supported methods for this endpoint

-- about the go types that are mapped to JSON data types during encoding:
   1- Go time.Time values (which are actually a struct behind the scenes) will be encoded as a
      JSON string in RFC 3339 format like "2020-11-08T06:27:59+01:00" , rather than as a JSON object.
   2- A []byte slice will be encoded as a base64-encoded JSON string, rather than as a JSON array. So,
      for example, a byte slice of []byte{'h','e','l','l','o'} would appear as "aGVsbG8=" in the JSON 
      output. The base64 encoding uses padding and the standard character set.
   3- Encoding of nested objects is supported. So, for example, if you have a slice of 
      structs in Go that will encode to an array of objects in JSON.
   4- hannels, functions and complex number types cannot be encoded. If you try to do so,
      you’ll get a json.UnsupportedTypeError error at runtime.
   5- Any pointer values will encode as the value pointed to. Likewise, interface{} values will
      encode as the value contained in the interface.

-- When we call json.NewEncoder(w).Encode(data) the JSON is created and written to the 
   http.ResponseWriter in a single step, which means there’s no opportunity to set HTTP
   response headers conditionally based on whether the Encode() method returns an error or not.

-- The - (hyphen) directive can be used when you never want a particular struct field to appear in the output
   In contrast the omitempty directive hides a field in the JSON output if and only if the struct
   field value is empty, where empty is defined as being: 
    1-- Equal to false , 0 , or ""  
    2--  An empty array , slice or map  
    3-- A nil pointer or a nil interface value
    
-- If you want to use omitempty and not change the key name then you can leave it blank in the struct 
   tag — like this: json:",omitempty" . Notice that the leading comma is still required.
-- Less-frequently-used, struct tag directive is string . You can use this on individual struct fields to 
    force the data to be represented as a string in the JSON output:  `json:"runtime,omitempty,string"` 
-- Behind the scenes time.Time is actually a struct, but it has a MarshalJSON() method which outputs a 
   RFC 3339 format representation of itself. This is what gets called whenever a time.Time value is encoded to JSON.
-- json.Unmarshal() requires about 80% more memory (B/op) than json.Decoder , as well as
   being a tiny bit slower (ns/op).

-- Go’s http.Server may still automatically generate and send plain-text HTTP responses. These
   scenarios include when:
      The HTTP request specifies an unsupported HTTP protocol version.
      The HTTP request contains a missing or invalid Host header, or multiple Host headers.
      The HTTP request contains an invalid header name or value.
      The HTTP request contains an unsupported Transfer-Encoding header.
      The size of the HTTP request headers exceeds the server’s MaxHeaderBytes setting.
      The client makes a HTTP request to a HTTPS server.
