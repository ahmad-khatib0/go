┌─────────────┐
 INFORMATION 
└─────────────┘
-- The rule about pointers vs. values for receivers is that value methods can be invoked on
     pointers and values, but pointer methods can only be invoked on pointers.

1- The bin directory will contain our compiled application binaries, ready for deployment to a production server.

2- The cmd/api directory will contain the application-specific code for our Greenlight API application. This 
    will include the code for running the server, reading and writing HTTP requests, and managing authentication.

3- The internal directory will contain various ancillary packages used by our API. It will
    contain the code for interacting with our database, doing data validation, sending emails and so on.
    Basically, any code which isn’t application-specific and can potentially be reused will live in here.
    Our Go code under cmd/api will import the packages in the internal directory (but never the other way around).
    
4- The migrations directory will contain the SQL migration files for our database.

5- The remote directory will contain the configuration files and setup scripts for our production server.


 ┌─────────────────────────────────────────────────────────────────────────────────────────────────────┐

  -- Signal                   Description                                Keyboard           Catchable 

  SIGINT                    Interrupt from keyboard                     Ctrl+C               Yes      

  SIGQUIT                   Quit from keyboard                          Ctrl+\               Yes      

  SIGKILL                   Kill process (terminate immediately)         --                   No      

  SIGTERM                   Terminate process in orderly manner          --                  Yes      

 └─────────────────────────────────────────────────────────────────────────────────────────────────────┘

-- Shutdown gracefully shuts down the server without interrupting any active connections.
    Shutdown works by first closing all open listeners, then closing all idle connections, and
    then waiting indefinitely for connections to return to idle and then shut down.
 

┌──────┐
 HTTP 
└──────┘

There are two common approaches to do API versioning:
-- 1- By prefixing all URLs with your API version, like /v1/healthcheck or /v2/healthcheck .
-- 2- By using custom Accept and Content-Type headers on requests and responses to
      convey the API version, like Accept: application/vnd.greenlight-v1 .
--  curl -i -X OPTIONS localhost:4000/v1/healthcheck    :will show supported methods for this endpoint

-- about the go types that are mapped to JSON data types during encoding:
   1- Go time.Time values (which are actually a struct behind the scenes) will be encoded as a
      JSON string in RFC 3339 format like "2020-11-08T06:27:59+01:00" , rather than as a JSON object.
   2- A []byte slice will be encoded as a base64-encoded JSON string, rather than as a JSON array. So,
      for example, a byte slice of []byte{'h','e','l','l','o'} would appear as "aGVsbG8=" in the JSON 
      output. The base64 encoding uses padding and the standard character set.
   3- Encoding of nested objects is supported. So, for example, if you have a slice of 
      structs in Go that will encode to an array of objects in JSON.
   4- hannels, functions and complex number types cannot be encoded. If you try to do so,
      you’ll get a json.UnsupportedTypeError error at runtime.
   5- Any pointer values will encode as the value pointed to. Likewise, interface{} values will
      encode as the value contained in the interface.

-- When we call json.NewEncoder(w).Encode(data) the JSON is created and written to the 
   http.ResponseWriter in a single step, which means there’s no opportunity to set HTTP
   response headers conditionally based on whether the Encode() method returns an error or not.

-- The - (hyphen) directive can be used when you never want a particular struct field to appear in the output
   In contrast the omitempty directive hides a field in the JSON output if and only if the struct
   field value is empty, where empty is defined as being: 
    1-- Equal to false , 0 , or ""  
    2--  An empty array , slice or map  
    3-- A nil pointer or a nil interface value
    
-- If you want to use omitempty and not change the key name then you can leave it blank in the struct 
   tag — like this: json:",omitempty" . Notice that the leading comma is still required.
-- Less-frequently-used, struct tag directive is string . You can use this on individual struct fields to 
    force the data to be represented as a string in the JSON output:  `json:"runtime,omitempty,string"` 
-- Behind the scenes time.Time is actually a struct, but it has a MarshalJSON() method which outputs a 
   RFC 3339 format representation of itself. This is what gets called whenever a time.Time value is encoded to JSON.
-- json.Unmarshal() requires about 80% more memory (B/op) than json.Decoder , as well as
   being a tiny bit slower (ns/op).


-- When the client explicitly supplies a field in the JSON request with the value null . In this case,
   our handler will ignore the field and treat it like it hasn’t been supplied. so there is no way to 
   determine the difference between the client not supplying a key/value pair in the JSON, 
   or supplying it with the value null .

--  As a rule of thumb: If your code makes a decision about what to return based on the content of a 
    request header, you should include that header name in your Vary response header — 
    even if the request didn’t include that header.
-- If your API endpoint requires credentials (cookies or HTTP basic authentication) you should also set an
   Access-Control-Allow-Credentials: true header in your responses. If you don’t set this header, then the 
   web browser will prevent any cross-origin responses with credentials from being read by JavaScript.
-- Origin — As we saw previously, this lets our API know what origin the preflight request is coming from.

-- Access-Control-Request-Headers won’t list all the headers that the real request will use. Only 
    headers that are not CORS-safe or forbidden will be listed. If there are no such headers,
    then Access-Control-Request-Headers may be omitted from the preflight request entirely.
--  preflight requests always have three components: the HTTP method OPTIONS , an Origin header,
    and an Access-Control-Request-Method header. If any one of these pieces is missing,
    we know that it is not a preflight request

-- cross-origin requests are classified as ‘simple’ when all the following conditions are met:
   1- The request HTTP method is one of the three CORS-safe methods: HEAD , GET or POST .
   2- The request headers are all either forbidden headers or one of the four CORS-safe headers:
          Accept    ||  Accept-Language   ||  Content-Language  ||   Content-Type
   3- The value for the Content-Type header (if set) is one of:
      application/x-www-form-urlencoded   ||   multipart/form-data    ||   text/plain
   
  ... When a cross-origin request doesn’t meet these conditions, then the web browser will trigger an 
        initial ‘preflight’ request before the real request. The purpose of this preflight
        request is to determine whether the real cross-origin request will be permitted or not

-- browsers may impose a hard maximum on how long the headers can be cached for. The MDN documentation says:
        Firefox caps this at 24 hours (86400 seconds).
        Chromium (prior to v76) caps at 10 minutes (600 seconds).
        Chromium (starting in v76) caps at 2 hours (7200 seconds).

-- Go’s http.Server may still automatically generate and send plain-text HTTP responses. These
   scenarios include when:
      The HTTP request specifies an unsupported HTTP protocol version.
      The HTTP request contains a missing or invalid Host header, or multiple Host headers.
      The HTTP request contains an invalid header name or value.
      The HTTP request contains an unsupported Transfer-Encoding header.
      The size of the HTTP request headers exceeds the server’s MaxHeaderBytes setting.
      The client makes a HTTP request to a HTTPS server.


+---------------------------------------------------------------------------------------------------------+
| "expvar" PACKAGE STATES                                                                                 |
|                                                                                                         |
| TotalAlloc —           Cumulative bytes allocated on the heap (will not decrease).                      |
| HeapAlloc —            Current number of bytes on the heap.                                             |
| HeapObjects —          Current number of objects on the heap.                                           |
| NumGC —                Number of completed garbage collector cycles.                                    |
| NextGC —               The target heap size of the next garbage collector cycle                         |
|                         (Go aims to keep HeapAlloc ≤ NextGC ).                                          |
| Sys —                  Total bytes of memory obtained from the OS (i.e. total memory reserved by the Go |
|                          runtime for the heap, stacks, and other internal data structures).             |
|                                                                                                         |
+---------------------------------------------------------------------------------------------------------+

+-------------------------------------------------------------------------------------------------------+
|                                                                                                       |
| CORS                                                                                                  |
|                                                                                                       |
| URL A               URL B                    Same origin?     Reason                                  | 
|                                                                                                       |
| https://foo.com/a   http://foo.com/a         No               Different scheme (http vs https)        |
|                                                                                                       |
| http://foo.com/a    http://www.foo.com/a     No               Different host (foo.com vs www.foo.com) |
|                                                                                                       |
| http://foo.com/a    http://foo.com:443/a     No               Different port (no port vs 443)         |
|                                                                                                       |
| http://foo.com/a    http://foo.com/b         Yes              Only the path is different              |
|                                                                                                       |
| http://foo.com/a    http://foo.com/a?b=c     Yes              Only the query string is different      |
|                                                                                                       |
| http://foo.com/a#b  http://foo.com/a#c       Yes              Only the fragment is different          |
|                                                                                                       |
+-------------------------------------------------------------------------------------------------------+


┌──────────┐
  Database 
└──────────┘
-- By default PostgreSQL has a hard limit of 100 open connections
-- MySQL will automatically close any connections which haven’t been used for 8 hours
-- Once every second Go runs a background cleanup operation to remove expired connections from the pool.

-- PostgreSQL doesn’t have unsigned integers
-- it’s not possible to use placeholder parameters for column names or SQL keywords (including ASC and DESC ).

-- the type citext (case-insensitive text). This type stores text data exactly as it is 
   inputted — without changing the case in any way — but comparisons against the data are 
   always case-insensitive... including lookups on associated indexes.
-- the type bytea (binary string). In this column we’ll store a one-way hash of the user’s
   password generated using bcrypt — not the plaintext password itself.

 ┌─────────────────────────────────────────────────────────────────────────────────────────────┐
   -- smallint, smallserial                int16 (-32768 to 32767)                             
   -- integer, serial                      int32 (-2147483648 to 2147483647)                   
   -- bigint, bigserial                    int64 (-9223372036854775808 to 9223372036854775807) 
 └─────────────────────────────────────────────────────────────────────────────────────────────┘

-- PRIMARY KEY (user_id, permission_id) sets a composite primary key
## Setting this as the primary key essentially means that the same user/permission combination can only 
   appear once in the table and cannot be duplicated


┌────────────┐
  Templating 
└────────────┘
+---------------------------------------------------------------------------------------------------------------+
| GO:EMBED RULES                                                                                                |
|                                                                                                               |
| -- You can only use the //go:embed directive on global variables at package level,                            |
| not within functions or methods                                                                               |
|                                                                                                               |
| -- //go:embed "<path>"   : the path should be relative to the source code file containing the directive       |
|                                                                                                               |
| -- Paths cannot contain . or .. elements, nor may they begin or end with a / . This essentially               |
|    restricts you to only embedding files that are contained in the same directory                             |
|    (or a subdirectory) as the source code which has the //go:embed directive.                                 |
|                                                                                                               |
| -- If the path is for a directory, then all files in the directory are recursively embedded, except for files |
| with names that begin with . or _ . If you want to include these files you                                    |
| should use the * wildcard character in the path, like //go:embed "templates/*"                                |
|                                                                                                               |
| -- You can specify multiple directories and files in one directive. For example:                              |
| //go:embed "images" "styles/css" "favicon.ico" .                                                              |
|                                                                                                               |
| -- The path separator should always be a forward slash, even on Windows machines.                             |
+---------------------------------------------------------------------------------------------------------------+


+--------+
| GO CLI |
+--------+

Note: It’s important to point out that there’s no easy way to verify that the checksums of the vendored 
  dependencies match the checksums in the go.sum file. Or, in other words, there’s no equivalent to go
  mod verify which works directly on the contents of the vendor folder. To mitigate that, it’s a good 
  idea to run both go mod verify and go mod vendor regularly. Using go mod verify will verify that the
  dependencies in your module cache match the go.sum file, and go mod vendor will copy those same 
  dependencies from the module cache into your vendor folder. This is one of the reasons why our make vendor 
  rule is setup to run both commands, and why we’ve also included it as a prerequisite to the make audit rule.




┌────────────┐
  Deployment 
└────────────┘
-- like most other reverse proxies, Caddy adds an X-Forwarded-For header to 
   each request. This header will contain the real IP address for the client.

---------- setup process ------------------------
1- first add the instance, or droplet or .... online, 

2- prepare connect to it with ssh 

3- add the setup script 

4- rsync -rP --delete ./remote/setup root@45.55.49.87:/root     
#   -r means recursively,  
#   -P display progress of the transfer
#   --delete  delete any extraneous files from destination directory on the droplet

5- ssh -t root@45.55.49.87 "bash /root/setup/01.sh"
#   -t flag to force pseudo-terminal allocation, which is useful when executing 
#   screen-based programs on a remote machine.
  IMPORTANT: While this script is running you will get a message saying: A new version of configuration 
    file /etc/ssh/sshd_config is available, but the version installed currently has been locally modified.
    This is because Digital Ocean automatically makes some adaptations to the sshd_config file, including
    disabling password-based access when you are using SSH keys for authentication.  
    select keep the local version currently installed and then <Ok> to continue.
    
6- ssh greenlight@45.55.49.87           # connect again 

7- want addetional configuration or settings ? so created another file like so for example: 
$ rsync -rP --delete ./remote/setup greenlight@45.55.49.87:~
  ssh -t greenlight@45.55.49.87 "sudo bash /home/greenlight/setup/02.sh"
